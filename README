texp is a library for parsing TeX like documents.

texp implements the TeX tokeniser and macro expander.  The tokeniser faithfully
reimplements the TeX tokeniser as specified in TeXBook. The implementation of
the macro expander is quite close to the implementation in TeX. However, texp
is missing almost all of the builtin macros found in TeX and the way \def is
implemented is equivalent to \long\def in TeX.

texp is not meant to be a replacement for TeX or any of its formats (macro
packages) like LaTeX. However, it should be powerful enough to implement those
if one desires to do so. The motivation for texp is that TeX tokeniser and
macro expander works really well for writing structured documents.  It is quite
frequent that one wants to introduce abbreviations for commonly occuring
patterns in a text and macros are perfect for this purpose.  This is what is
missing from most of structured text formats like Markdown, RST, etc.

texp is not a typesetter! There is no intention of introducing layout
engine in texp. texp is also not intended to comply fully with TeX.

For instance, one could introduce macro with multiple patterns and bodies.

With extensions texp could be used as a preprocessor for TeX documents themselves.

Here's a snippet to give an idea of texp API:

    import texp

    doc = iter('\def\macro#1{Macro #1}  Example \macro{1}')
    tokens = texp.tokenstream(doc) # a stream of tokens produced according to the TeX algorithm
    expanded = texp.expand(tokens) # a stream of tokens that could not be expanded
    print(texp.tokenstream_to_str(expanded)) # prints 'Example Macro 1'

